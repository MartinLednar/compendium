"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SFNPutNodes = void 0;
const aws_stepfunctions_1 = require("aws-cdk-lib/aws-stepfunctions");
const aws_stepfunctions_tasks_1 = require("aws-cdk-lib/aws-stepfunctions-tasks");
const execute_statement_1 = require("./aws-stepfunctions-tasks/dynamodb/execute-statement");
class SFNPutNodes extends aws_stepfunctions_1.StateMachine {
    constructor(scope, id, props) {
        const definition = SFNPutNodes.getDefinition(scope, id, props);
        super(scope, `${id}PutNode`, {
            definition,
            stateMachineType: aws_stepfunctions_1.StateMachineType.STANDARD,
            ...props,
        });
    }
    static getDefinition(scope, id, { dynamoTable }) {
        const putNode = new aws_stepfunctions_tasks_1.DynamoPutItem(scope, `${id}PutItem`, {
            table: dynamoTable,
            resultPath: aws_stepfunctions_1.JsonPath.stringAt("$.result"),
            item: {
                PK: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.format("NODE|{}", aws_stepfunctions_1.JsonPath.stringAt("$.node.id"))),
                SK: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.format("NODE|{}", aws_stepfunctions_1.JsonPath.stringAt("$.node.id"))),
                GSI1PK: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString("NODES|RECENT"),
                GSI1SK: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.format("{}|{}", aws_stepfunctions_1.JsonPath.stringAt("$$.Execution.StartTime"), aws_stepfunctions_1.JsonPath.stringAt("$.node.id"))),
                id: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.stringAt("$.node.id")),
                name: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.stringAt("$.node.name")),
                metadata: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.jsonToString(aws_stepfunctions_1.JsonPath.objectAt("$.node.metadata"))),
                version: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.stringAt("$$.Execution.StartTime")),
            },
        });
        const storeDependeeEdge = new aws_stepfunctions_tasks_1.DynamoPutItem(scope, `${id}StoreDependeeEdge`, {
            table: dynamoTable,
            resultPath: aws_stepfunctions_1.JsonPath.DISCARD,
            item: {
                PK: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.format("NODE|{}", aws_stepfunctions_1.JsonPath.stringAt("$.node.id"))),
                SK: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.format("DEPENDENCY|NODE|{}", aws_stepfunctions_1.JsonPath.stringAt("$.dependency"))),
                dependencyId: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.format("NODE|{}", aws_stepfunctions_1.JsonPath.stringAt("$.dependency"))),
                dependantId: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.format("NODE|{}", aws_stepfunctions_1.JsonPath.stringAt("$.node.id"))),
                dependantVersion: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.stringAt("$$.Execution.StartTime")),
            },
        });
        const getOutdatedDependencies = new execute_statement_1.DynamoExecuteStatement(scope, `${id}GetOutdatedDependencies`, {
            table: dynamoTable,
            statement: aws_stepfunctions_1.JsonPath.format(`SELECT * FROM "${dynamoTable.tableName}" WHERE PK = 'NODE|{}' AND begins_with(SK,'DEPENDENCY|NODE|') AND dependantVersion < ?`, aws_stepfunctions_1.JsonPath.stringAt("$.node.id")),
            parameters: [
                aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.stringAt("$$.Execution.StartTime")),
            ],
            resultPath: aws_stepfunctions_1.JsonPath.stringAt("$.invalidDependencies"),
        });
        const deleteOutdatedDependencie = new aws_stepfunctions_tasks_1.DynamoDeleteItem(scope, `${id}GetOutdatedDependencie`, {
            table: dynamoTable,
            key: {
                PK: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.stringAt("$.dependency.PK.S")),
                SK: aws_stepfunctions_tasks_1.DynamoAttributeValue.fromString(aws_stepfunctions_1.JsonPath.stringAt("$.dependency.SK.S")),
            },
            resultPath: aws_stepfunctions_1.JsonPath.stringAt("$.invalidDependencies"),
        });
        return new aws_stepfunctions_1.Map(scope, "MapPutNodes", {
            itemsPath: aws_stepfunctions_1.JsonPath.stringAt("$.nodes"),
            parameters: {
                node: aws_stepfunctions_1.JsonPath.stringAt("$$.Map.Item.Value"),
            },
        }).iterator(putNode
            .next(new aws_stepfunctions_1.Map(scope, "StoreDependencies", {
            itemsPath: aws_stepfunctions_1.JsonPath.stringAt("$.node.dependencies"),
            parameters: {
                dependency: aws_stepfunctions_1.JsonPath.stringAt("$$.Map.Item.Value"),
                node: aws_stepfunctions_1.JsonPath.stringAt("$.node"),
            },
            resultPath: aws_stepfunctions_1.JsonPath.DISCARD,
        }).iterator(storeDependeeEdge))
            .next(getOutdatedDependencies.next(new aws_stepfunctions_1.Map(scope, "DeleteOutdatedDependencies", {
            itemsPath: aws_stepfunctions_1.JsonPath.stringAt("$.invalidDependencies.Items"),
            parameters: {
                dependency: aws_stepfunctions_1.JsonPath.stringAt("$$.Map.Item.Value"),
                node: aws_stepfunctions_1.JsonPath.stringAt("$.node"),
            },
        }).iterator(deleteOutdatedDependencie))));
    }
}
exports.SFNPutNodes = SFNPutNodes;
//# sourceMappingURL=data:application/json;base64,