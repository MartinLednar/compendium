"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoExecuteStatement = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_stepfunctions_1 = require("aws-cdk-lib/aws-stepfunctions");
/**
 * A StepFunctions task to call DynamoGetItem
 */
class DynamoExecuteStatement extends aws_stepfunctions_1.TaskStateBase {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.props = props;
        this.taskPolicies = [
            new aws_iam_1.PolicyStatement({
                resources: [
                    aws_cdk_lib_1.Stack.of(this).formatArn({
                        service: "dynamodb",
                        resource: "table",
                        resourceName: props.table.tableName,
                    }),
                ],
                actions: [`dynamodb:PartiQLSelect`],
            }),
        ];
    }
    /**
     * @internal
     */
    _renderTask() {
        return {
            Resource: "arn:aws:states:::aws-sdk:dynamodb:executeStatement",
            Parameters: aws_stepfunctions_1.FieldUtils.renderObject({
                ConsistentRead: this.props.consistentRead ?? false,
                Statement: this.props.statement,
                Parameters: this.props.parameters?.map((x) => x.toObject()),
                ReturnConsumedCapacity: this.props.returnConsumedCapacity,
            }),
        };
    }
}
exports.DynamoExecuteStatement = DynamoExecuteStatement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZS1zdGF0ZW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJleGVjdXRlLXN0YXRlbWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBb0M7QUFFcEMsaURBQXNEO0FBQ3RELHFFQUt1QztBQXFEdkM7O0dBRUc7QUFDSCxNQUFhLHNCQUF1QixTQUFRLGlDQUFhO0lBSXZELFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNPLEtBQWtDO1FBRW5ELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRlAsVUFBSyxHQUFMLEtBQUssQ0FBNkI7UUFJbkQsSUFBSSxDQUFDLFlBQVksR0FBRztZQUNsQixJQUFJLHlCQUFlLENBQUM7Z0JBQ2xCLFNBQVMsRUFBRTtvQkFDVCxtQkFBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUM7d0JBQ3ZCLE9BQU8sRUFBRSxVQUFVO3dCQUNuQixRQUFRLEVBQUUsT0FBTzt3QkFDakIsWUFBWSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUztxQkFDcEMsQ0FBQztpQkFDSDtnQkFDRCxPQUFPLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQzthQUNwQyxDQUFDO1NBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNPLFdBQVc7UUFDbkIsT0FBTztZQUNMLFFBQVEsRUFBRSxvREFBb0Q7WUFDOUQsVUFBVSxFQUFFLDhCQUFVLENBQUMsWUFBWSxDQUFDO2dCQUNsQyxjQUFjLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLElBQUksS0FBSztnQkFDbEQsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUztnQkFDL0IsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUMzRCxzQkFBc0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLHNCQUFzQjthQUMxRCxDQUFDO1NBQ0gsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXZDRCx3REF1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFjayB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHsgSVRhYmxlIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1keW5hbW9kYlwiO1xuaW1wb3J0IHsgUG9saWN5U3RhdGVtZW50IH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1pYW1cIjtcbmltcG9ydCB7XG4gIEZpZWxkVXRpbHMsXG4gIFRhc2tNZXRyaWNzQ29uZmlnLFxuICBUYXNrU3RhdGVCYXNlLFxuICBUYXNrU3RhdGVCYXNlUHJvcHMsXG59IGZyb20gXCJhd3MtY2RrLWxpYi9hd3Mtc3RlcGZ1bmN0aW9uc1wiO1xuaW1wb3J0IHsgRHluYW1vQXR0cmlidXRlVmFsdWUgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXN0ZXBmdW5jdGlvbnMtdGFza3NcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBEeW5hbW9NZXRob2QsIGdldER5bmFtb0V4ZWN1dGVTdGF0ZW1lbnRBcm4gfSBmcm9tIFwiLi9wcml2YXRlL3V0aWxzXCI7XG5pbXBvcnQge1xuICBEeW5hbW9Db25zdW1lZENhcGFjaXR5LFxuICBEeW5hbW9Qcm9qZWN0aW9uRXhwcmVzc2lvbixcbn0gZnJvbSBcIi4vc2hhcmVkLXR5cGVzXCI7XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgRHluYW1vR2V0SXRlbSBUYXNrXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRHluYW1vRXhlY3V0ZVN0YXRlbWVudFByb3BzIGV4dGVuZHMgVGFza1N0YXRlQmFzZVByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSB0YWJsZSBjb250YWluaW5nIHRoZSByZXF1ZXN0ZWQgaXRlbS5cbiAgICovXG4gIHJlYWRvbmx5IHRhYmxlOiBJVGFibGU7XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHJlYWQgY29uc2lzdGVuY3kgbW9kZWw6XG4gICAqIElmIHNldCB0byB0cnVlLCB0aGVuIHRoZSBvcGVyYXRpb24gdXNlcyBzdHJvbmdseSBjb25zaXN0ZW50IHJlYWRzO1xuICAgKiBvdGhlcndpc2UsIHRoZSBvcGVyYXRpb24gdXNlcyBldmVudHVhbGx5IGNvbnNpc3RlbnQgcmVhZHMuXG4gICAqL1xuICByZWFkb25seSBzdGF0ZW1lbnQ6IHN0cmluZztcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgcmVhZCBjb25zaXN0ZW5jeSBtb2RlbDpcbiAgICogSWYgc2V0IHRvIHRydWUsIHRoZW4gdGhlIG9wZXJhdGlvbiB1c2VzIHN0cm9uZ2x5IGNvbnNpc3RlbnQgcmVhZHM7XG4gICAqIG90aGVyd2lzZSwgdGhlIG9wZXJhdGlvbiB1c2VzIGV2ZW50dWFsbHkgY29uc2lzdGVudCByZWFkcy5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IGNvbnNpc3RlbnRSZWFkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogT25lIG9yIG1vcmUgdmFsdWVzIHRoYXQgY2FuIGJlIHN1YnN0aXR1dGVkIGluIGFuIGV4cHJlc3Npb24uXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2FtYXpvbmR5bmFtb2RiL2xhdGVzdC9BUElSZWZlcmVuY2UvQVBJX1B1dEl0ZW0uaHRtbCNEREItUHV0SXRlbS1yZXF1ZXN0LUV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcbiAgICpcbiAgICogQGRlZmF1bHQgLSBObyBleHByZXNzaW9uIGF0dHJpYnV0ZSB2YWx1ZXNcbiAgICovXG4gIHJlYWRvbmx5IHBhcmFtZXRlcnM/OiBbRHluYW1vQXR0cmlidXRlVmFsdWVdO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBsZXZlbCBvZiBkZXRhaWwgYWJvdXQgcHJvdmlzaW9uZWQgdGhyb3VnaHB1dCBjb25zdW1wdGlvbiB0aGF0IGlzIHJldHVybmVkIGluIHRoZSByZXNwb25zZVxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9hbWF6b25keW5hbW9kYi9sYXRlc3QvQVBJUmVmZXJlbmNlL0FQSV9HZXRJdGVtLmh0bWwjRERCLUdldEl0ZW0tcmVxdWVzdC1SZXR1cm5Db25zdW1lZENhcGFjaXR5XG4gICAqXG4gICAqIEBkZWZhdWx0IER5bmFtb0NvbnN1bWVkQ2FwYWNpdHkuTk9ORVxuICAgKi9cbiAgcmVhZG9ubHkgcmV0dXJuQ29uc3VtZWRDYXBhY2l0eT86IER5bmFtb0NvbnN1bWVkQ2FwYWNpdHk7XG59XG5cbi8qKlxuICogQSBTdGVwRnVuY3Rpb25zIHRhc2sgdG8gY2FsbCBEeW5hbW9HZXRJdGVtXG4gKi9cbmV4cG9ydCBjbGFzcyBEeW5hbW9FeGVjdXRlU3RhdGVtZW50IGV4dGVuZHMgVGFza1N0YXRlQmFzZSB7XG4gIHByb3RlY3RlZCByZWFkb25seSB0YXNrTWV0cmljcz86IFRhc2tNZXRyaWNzQ29uZmlnO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgdGFza1BvbGljaWVzPzogUG9saWN5U3RhdGVtZW50W107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IER5bmFtb0V4ZWN1dGVTdGF0ZW1lbnRQcm9wc1xuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIHRoaXMudGFza1BvbGljaWVzID0gW1xuICAgICAgbmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgIHJlc291cmNlczogW1xuICAgICAgICAgIFN0YWNrLm9mKHRoaXMpLmZvcm1hdEFybih7XG4gICAgICAgICAgICBzZXJ2aWNlOiBcImR5bmFtb2RiXCIsXG4gICAgICAgICAgICByZXNvdXJjZTogXCJ0YWJsZVwiLFxuICAgICAgICAgICAgcmVzb3VyY2VOYW1lOiBwcm9wcy50YWJsZS50YWJsZU5hbWUsXG4gICAgICAgICAgfSksXG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtgZHluYW1vZGI6UGFydGlRTFNlbGVjdGBdLFxuICAgICAgfSksXG4gICAgXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHByb3RlY3RlZCBfcmVuZGVyVGFzaygpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBSZXNvdXJjZTogXCJhcm46YXdzOnN0YXRlczo6OmF3cy1zZGs6ZHluYW1vZGI6ZXhlY3V0ZVN0YXRlbWVudFwiLFxuICAgICAgUGFyYW1ldGVyczogRmllbGRVdGlscy5yZW5kZXJPYmplY3Qoe1xuICAgICAgICBDb25zaXN0ZW50UmVhZDogdGhpcy5wcm9wcy5jb25zaXN0ZW50UmVhZCA/PyBmYWxzZSxcbiAgICAgICAgU3RhdGVtZW50OiB0aGlzLnByb3BzLnN0YXRlbWVudCxcbiAgICAgICAgUGFyYW1ldGVyczogdGhpcy5wcm9wcy5wYXJhbWV0ZXJzPy5tYXAoKHgpID0+IHgudG9PYmplY3QoKSksXG4gICAgICAgIFJldHVybkNvbnN1bWVkQ2FwYWNpdHk6IHRoaXMucHJvcHMucmV0dXJuQ29uc3VtZWRDYXBhY2l0eSxcbiAgICAgIH0pLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==